<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>烬王的技术博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://es-7.github.io/blog/"/>
  <updated>2017-12-21T11:33:38.000Z</updated>
  <id>https://es-7.github.io/blog/</id>
  
  <author>
    <name>石其龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现前端模板引擎</title>
    <link href="https://es-7.github.io/blog/2015/07/18/template/"/>
    <id>https://es-7.github.io/blog/2015/07/18/template/</id>
    <published>2015-07-17T16:00:00.000Z</published>
    <updated>2017-12-21T11:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>   前端模板引擎相信大家都不会陌生了吧，尤其是注重前后端分离的今天(除非你还在用拼接字符串)。<br>   <strong>引擎</strong>一词总让人感觉很高端的样子，其实归根结底也只是处理字符串的一种方式而已。<br>   本文总结了3种实现模板引擎的方式，最后将逐步实现一个类似于 underscore.template 的模板插件。<br> <a id="more"></a>  </p><h3 id="一、replace模板"><a href="#一、replace模板" class="headerlink" title="一、replace模板"></a>一、replace模板</h3><p>replace 是字符串提供的一个超级强大的方法，这里举例介绍简单的使用。</p><ul><li>一参可为 <code>字符串</code> 或 <code>正则</code>:<br>  ○ 为正则时有两种情况: <code>普通匹配模式</code> 和 <code>全局匹配模式</code>:<br>  ■ 全局匹配模式下，若二参为函数，则该函数在每次匹配时都会被调用    </li><li>二参可为 <code>字符串</code> 或 <code>一个用于生成字符串的函数</code>:<br>  ○ 当为字符串时:<pre><code>■ 可在字符串中使用 特殊替换字符 ($n ...)</code></pre>  ○ 当为函数时:<pre><code>■ 函数中不能用特殊替换字符■ 一参为正则匹配的文本■ 倒数第二参为匹配到的子字符串在原字符串中的偏移量■ 最后一参为被匹配的原始字符串■ 其余参数为正则中每个分组匹配到的文本                  </code></pre></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">match, p1, p2, p3, offset, string</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// match 为 'abc12345#$*%'        : 正则匹配的文本</span></span><br><span class="line">  <span class="comment">// p1,p2,p3 分别为 abc 12345 #$*% : 即每个小组匹配到的文本, pn 表示有 n 个小组</span></span><br><span class="line">  <span class="comment">// offset 为 0 : 匹配到的子字符串在原字符串中的偏移量。</span></span><br><span class="line">  <span class="comment">// （比如，如果原字符串是'abcd'，匹配到的子字符串时'bc'，那么这个参数将是1）</span></span><br><span class="line">  <span class="comment">// string 为 'abc12345#$*%'       : 被匹配的原始字符串</span></span><br><span class="line">    <span class="keyword">return</span> [p1, p2, p3].join(<span class="string">' - '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意正则中的 括号 ，这里分有 3个组</span></span><br><span class="line"><span class="keyword">var</span> newString = <span class="string">'abc12345#$*%'</span>.replace(<span class="regexp">/([^\d]*)(\d*)([^\w]*)/</span>, replacer);</span><br><span class="line"><span class="comment">// newString =&gt; 'abc - 12345 - #$*%'</span></span><br></pre></td></tr></table></figure><p>再举几个简单的案例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最基础的使用</span></span><br><span class="line"><span class="string">'123'</span>.replace(<span class="string">'1'</span>, <span class="string">'A'</span>) <span class="comment">// 'A23'</span></span><br><span class="line"><span class="string">'lalala 2Away0x2'</span>.replace(<span class="regexp">/2(.*)2/</span>, <span class="string">'$1'</span>) <span class="comment">// 'lalala Away0x'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// trim</span></span><br><span class="line"><span class="keyword">const</span> trim = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">trim(<span class="string">'  abc    '</span>) <span class="comment">// 'abc'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// format</span></span><br><span class="line"><span class="keyword">const</span> format = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">    (...args) =&gt;</span><br><span class="line">        str.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>, (match, p) =&gt; args[p] || <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">format(<span class="string">'lalal&#123;0&#125;wowowo&#123;1&#125;hahah&#123;2&#125;'</span>)(<span class="string">'-A-'</span>, <span class="string">'-B-'</span>, <span class="string">'-C'</span>) <span class="comment">// lala-A-wowo-B-haha-C</span></span><br></pre></td></tr></table></figure><h4 id="replace模板原理："><a href="#replace模板原理：" class="headerlink" title="replace模板原理："></a><strong>replace模板原理</strong>：</h4><p>先在模板中预留占位，再将对应的数据填入</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现:"></a><strong>实现</strong>:</h4><p>目标1：可填充简单数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tpl = <span class="function">(<span class="params">str, data</span>) =&gt;</span> str.replace(<span class="regexp">/&#123;&#123;(.*)&#125;&#125;/g</span>, (match, p) =&gt; data[p])</span><br><span class="line">tpl(<span class="string">'&lt;div&gt;&#123;&#123;data&#125;&#125;&lt;/div&gt;'</span>, &#123;<span class="attr">data</span>: <span class="string">'tpl'</span>&#125;) <span class="comment">// '&lt;div&gt;tpl&lt;/div&gt;'</span></span><br></pre></td></tr></table></figure><p>目标2：可填充嵌套数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可根据占位符 &#123;&#123;data.a&#125;&#125; 中的 "." 来获得数据的依赖路径，从而得到对应的数据</span></span><br><span class="line"><span class="comment">// 由于 使用 "." 连接，所以其前后应为合法的变量名，因此需重新构造正则</span></span><br><span class="line"><span class="comment">/* 合法变量名</span></span><br><span class="line"><span class="comment">*    - 开头可为字符和少量特殊字符: [a-zA-Z$_]</span></span><br><span class="line"><span class="comment">*    - 余部还可是数字:            [a-zA-Z$_0-9]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 除开头外还需匹配 连接符 "." ,因此最终正则为: /&#123;&#123;([a-zA-Z$_][a-zA-Z$_0-9\.]*)&#125;&#125;/g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tpl</span> (<span class="params">str, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/&#123;&#123;([a-zA-Z$_][a-zA-Z$_0-9\.]*)&#125;&#125;/g</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局匹配模式下，replace 的回调在每次匹配时都会执行,</span></span><br><span class="line">    <span class="comment">// p 为占位符中的变量,该例为 data.a</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(reg, (match, p) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> paths = p.split(<span class="string">'.'</span>) <span class="comment">// ['data', 'a']</span></span><br><span class="line">        <span class="keyword">let</span> result  = data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (paths.length &gt; <span class="number">0</span>)</span><br><span class="line">            result = result[ paths.shift() ] <span class="comment">// 得到路径最末端的数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(result) || match <span class="comment">// 需转成字符串，因为可能遇到 0, null 等数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">tpl(<span class="string">'&lt;div&gt;&#123;&#123;data.a&#125;&#125;&lt;/div&gt;'</span>, &#123;<span class="attr">data</span>: &#123;<span class="attr">a</span>: <span class="string">'tpl'</span>&#125;&#125;) <span class="comment">// '&lt;div&gt;tpl&lt;/div&gt;'</span></span><br></pre></td></tr></table></figure><p><strong>最终代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tpl</span> (<span class="params">str, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/&#123;&#123;([a-zA-Z$_][a-zA-Z$_0-9\.]*)&#125;&#125;/g</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str.replace(reg, (match, p) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> paths = p.split(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">let</span> result  = data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (paths.length &gt; <span class="number">0</span>)</span><br><span class="line">            result = result[ paths.shift() ]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(result) || match</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优缺点</strong>：</p><ul><li>优点：简单</li><li>缺点：模板不支持表达式（for/if/else等等），所有数据得先计算好再填入，灵活性差，难以满足复杂的需求。</li></ul><p><strong>资料</strong><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">replace详细语法</a></p><h3 id="二、es6模板字符串"><a href="#二、es6模板字符串" class="headerlink" title="二、es6模板字符串"></a>二、es6模板字符串</h3><p> 模板字符串是 es6 中我最爱的特性啦！比起传统模板引擎，我更喜欢用模板字符串来编写组件</p><ul><li>模板字符串包裹在 反引号(Esc按钮下面那个) 中，其中可通过 ${} 的语法进行插值</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 特性一:多行</span></span><br><span class="line"><span class="string">`123123</span></span><br><span class="line"><span class="string"> 23213`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特性二: 字符串中可插值（强大的不要不要的）</span></span><br><span class="line"><span class="comment">/* 作为一门伪函数式编程语言，js 的很多语法都可以返回数据:</span></span><br><span class="line"><span class="comment">*    - 表达式: 各种运算符表达式，三目(可用来替代简单的判断语句)</span></span><br><span class="line"><span class="comment">*    - 函数:  封装各种复杂的逻辑，最后返回一个值即可</span></span><br><span class="line"><span class="comment">*    - 方法:  如一些有返回值的数据方法</span></span><br><span class="line"><span class="comment">*       - 最强大的如数组的 map, filter ...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 以下字符串都等于 '123tpl456'</span></span><br><span class="line"><span class="keyword">const</span> str1 = <span class="string">`123<span class="subst">$&#123;<span class="string">'tpl'</span>&#125;</span>456`</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">`123<span class="subst">$&#123;<span class="literal">false</span> || <span class="string">'tpl'</span>&#125;</span>456`</span></span><br><span class="line"><span class="keyword">const</span> str3 = <span class="string">`123<span class="subst">$&#123;<span class="literal">true</span> ? <span class="string">'tpl'</span> : <span class="string">''</span>&#125;</span>456`</span></span><br><span class="line"><span class="keyword">const</span> str4 = <span class="string">`123<span class="subst">$&#123; (<span class="keyword">function</span> () &#123;<span class="keyword">return</span> <span class="string">'tpl'</span>&#125;</span>()) &#125;456`</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'tpl'</span></span><br><span class="line"><span class="keyword">const</span> str5 = <span class="string">`123<span class="subst">$&#123; fn() &#125;</span>456`</span></span><br><span class="line"><span class="keyword">const</span> str6 = <span class="string">`123<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">    [<span class="string">'T'</span>, <span class="string">'P'</span>, <span class="string">'L'</span>].map(s =&gt; s.toLowerCase()).join(<span class="string">''</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">&#125;</span>456`</span></span><br><span class="line"><span class="built_in">console</span>.log([str1, str2, str3, str4, str5, str6].every(<span class="function"><span class="params">s</span> =&gt;</span> s === <span class="string">'123tpl456'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特性三: 模板函数 (个人很少用到)</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>, b = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span> (<span class="params">strArr, ...vals</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(strArr, vals)</span><br><span class="line">&#125;</span><br><span class="line">tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123;a * b&#125;</span>`</span></span><br><span class="line"><span class="comment">// strArr =&gt; ['Hello ', ' world ', '']</span></span><br><span class="line"><span class="comment">// vals   =&gt; [15, 30]  ($&#123;&#125;里的值)</span></span><br></pre></td></tr></table></figure><p>下面用es6模板字符串写一个分页组件:</p><p></p><p data-height="265" data-theme-id="dark" data-slug-hash="XVKxyO" data-default-tab="result" data-user="jinwang" data-embed-version="2" data-pen-title="XVKxyO" class="codepen">See the Pen <a href="https://codepen.io/jinwang/pen/XVKxyO/" target="_blank" rel="noopener">XVKxyO</a> by  石其龙 (<a href="https://codepen.io/jinwang" target="_blank" rel="noopener">@jinwang</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p><strong>资料</strong><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">es6模板字符串语法</a></p><h3 id="三、Function模板"><a href="#三、Function模板" class="headerlink" title="三、Function模板"></a>三、Function模板</h3><p>Function 是 js 提供的一个用于构造 Function 对象的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params">user, msg</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(user, msg)</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">'Away0x'</span>, <span class="string">'lalala'</span>)</span><br><span class="line"><span class="comment">// Function 构造函数</span></span><br><span class="line"><span class="keyword">const</span> log = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'user'</span>, <span class="string">'msg'</span>, <span class="string">'console.log(user, msg)'</span>)</span><br><span class="line">log(<span class="string">'Away0x'</span>, <span class="string">'lalala'</span>)</span><br></pre></td></tr></table></figure><p>大多数前端模板引擎都是用这种方式实现的，其原理在于运用了 js Function 对象可将字符串解析为函数的能力。<br>一个普通模板引擎的工作步骤大致如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 编写模板(本例子拟以&#123;# #&#125;为模板语法)</span></span><br><span class="line">&#123;# if( data.con &gt; 20 ) &#123; #&#125;</span><br><span class="line">    &lt;p&gt;ifififififif&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&#123;# &#125; else &#123; #&#125;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;elseelseelseelse&lt;/</span>p&gt;</span><br><span class="line">&#123;# &#125; #&#125;</span><br><span class="line"><span class="comment">// 2. 由模板生成函数体字符串</span></span><br><span class="line"><span class="keyword">const</span> functionbody = <span class="string">`</span></span><br><span class="line"><span class="string">    var tpl = ''</span></span><br><span class="line"><span class="string">    if (data.con &gt; 20) &#123;</span></span><br><span class="line"><span class="string">        tpl += '&lt;p&gt;ifififififif&lt;/p&gt;'</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">        tpl += '&lt;p&gt;ifififififif&lt;/p&gt;'</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return tpl</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">// 3. 通过 Function 解析字符串并生成函数</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'data'</span>, functionbody)(data)</span><br></pre></td></tr></table></figure><p>由此可见，只要将模板识别码里的字符串内容生成 js语句，而其余内容之前加上 一个 ‘tpl += ‘ 即可。<br>实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tpl = <span class="function">(<span class="params">str, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> tplStr = str.replace(<span class="regexp">/\n/g</span>, <span class="string">''</span>)</span><br><span class="line">        .replace(<span class="regexp">/&#123;&#123;(.+?)&#125;&#125;/g</span>, (match, p) =&gt; <span class="string">`'+(<span class="subst">$&#123;p&#125;</span>)+'`</span>)</span><br><span class="line">        .replace(<span class="regexp">/&#123;#(.+?)#&#125;/g</span>, (match, p) =&gt; <span class="string">`'; <span class="subst">$&#123;p&#125;</span>; tpl += '`</span>)</span><br><span class="line">    <span class="comment">// console.log(tplStr)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'data'</span>, <span class="string">`var tpl='<span class="subst">$&#123;tplStr&#125;</span>'; return tpl;`</span>)(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">    &#123;# if( data.con &gt; 20 ) &#123; #&#125;</span></span><br><span class="line"><span class="string">        &lt;p&gt;ifififififif&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &#123;# &#125; else &#123; #&#125;</span></span><br><span class="line"><span class="string">        &lt;p&gt;elseelseelseelse&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &#123;# &#125; #&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#123;# for(var i = 0; i &lt; data.list.length; i++) &#123; #&#125;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;i &#125;&#125; : &#123;&#123; data.list[i] &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &#123;# &#125; #&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">con</span>:<span class="number">21</span>, <span class="attr">list</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">76</span>,<span class="number">87</span>,<span class="number">8</span>]&#125;</span><br><span class="line"><span class="built_in">console</span>.log( tpl(str, data) )</span><br><span class="line"><span class="comment">// &lt;p&gt;ifififififif&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;p&gt;0 : 1&lt;/p&gt;&lt;p&gt;1 : 2&lt;/p&gt;&lt;p&gt;2 : 3&lt;/p&gt;&lt;p&gt;3 : 4&lt;/p&gt;&lt;p&gt;4 : 5....后边略</span></span><br></pre></td></tr></table></figure><p>ok, 一个最最简单的模板引擎就已经完成了，支持在模板中嵌入 js 语句，虽然只有不到10行，但还是挺强大的对不?</p><p><strong>资料</strong><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">Function语法</a></p><h4 id="拓展-分步实现模板引擎"><a href="#拓展-分步实现模板引擎" class="headerlink" title="拓展:分步实现模板引擎"></a><strong>拓展</strong>:分步实现模板引擎</h4><p>第一步：为了能够更好的使用，将前面的代码抽成一个类。</p><ul><li>标识符格式有可能和后端模板引擎冲突，因此应实现成可配置的</li><li>在模板中应能添加注释</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (config) &#123;</span><br><span class="line">        <span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">            signs: &#123;</span><br><span class="line">                varSign:       [<span class="string">'&#123;&#123;'</span>, <span class="string">'&#125;&#125;'</span>],    <span class="comment">// 变量/表达式</span></span><br><span class="line">            evalSign:      [<span class="string">'&#123;#'</span>, <span class="string">'#&#125;'</span>],    <span class="comment">// 语句</span></span><br><span class="line">                commentSign:   [<span class="string">'&lt;!--'</span>, <span class="string">'--&gt;'</span>], <span class="comment">// 普通注释</span></span><br><span class="line">                noCommentSign: [<span class="string">'&#123;@'</span>, <span class="string">'@&#125;'</span>]     <span class="comment">// 忽略注释</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可通过配置来修改标识符</span></span><br><span class="line">        <span class="keyword">this</span>.config = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultConfig, config)</span><br><span class="line">        <span class="comment">// ['&#123;&#123;', '&#125;&#125;'] =&gt; /&#123;&#123;([\\s\\S]+?)&#125;&#125;/g 构造正则</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.config.signs).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.config.signs[key].splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'(.+?)'</span>)</span><br><span class="line">            <span class="keyword">this</span>.config.signs[key] = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.config.signs[key].join(<span class="string">''</span>), <span class="string">'g'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模板解析</span></span><br><span class="line">    _compile (str, data)&#123;</span><br><span class="line"><span class="keyword">const</span> tpl = str.replace(<span class="regexp">/\n/g</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment">// 注释</span></span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.noCommentSign, () =&gt; <span class="string">''</span>)</span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.commentSign,</span><br><span class="line">     (match, p) =&gt; <span class="string">`'+'&lt;!-- <span class="subst">$&#123;p&#125;</span> --&gt;'+'`</span>)</span><br><span class="line">            <span class="comment">// 表达式/变量</span></span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.varSign, (match, p) =&gt; <span class="string">`'+(<span class="subst">$&#123;p&#125;</span>)+'`</span>)</span><br><span class="line">            <span class="comment">// 语句</span></span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.evalSign, (match, p) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span>  exp = p.replace(<span class="string">'&amp;gt;'</span>, <span class="string">'&gt;'</span>).replace(<span class="string">'&amp;lt;'</span>, <span class="string">'&lt;'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`'; <span class="subst">$&#123;exp&#125;</span>; tpl += '`</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'data'</span>, <span class="string">`var tpl='<span class="subst">$&#123;tpl&#125;</span>'; return tpl;`</span>)(data)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    compile (tplStr, data) &#123; <span class="keyword">return</span> <span class="keyword">this</span>._compile(tplStr, data) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tpl</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tpl(config)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( tpl().compile(str, data) )</span><br></pre></td></tr></table></figure><p>第二步：解决注释的bug</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &#123;&#123;a&#125;&#125; --&gt;</span><br><span class="line"><span class="comment">// 由于注释中有标识符，因此会将 a 作为变量解析，会报未定义错误</span></span><br></pre></td></tr></table></figure><ul><li>解决办法：在解析注释时，如注释里有标识符，则将其先替换成其他符号，等语句变量的解析完成时，再替换回来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.replace( <span class="keyword">this</span>.config.signs.commentSign, (match, p) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> exp = p.replace(<span class="regexp">/[\&#123;\&lt;\&#125;\&gt;]/g</span>, match =&gt; <span class="string">`&amp;*&amp;<span class="subst">$&#123;match.charCodeAt()&#125;</span>&amp;*&amp;`</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`'+'&lt;!-- <span class="subst">$&#123;exp&#125;</span> --&gt;'+'`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ... 解析变量和语句</span></span><br><span class="line">.replace(<span class="regexp">/\&amp;\*\&amp;(.*?)\&amp;\*\&amp;/g</span>, (match, p) =&gt;  <span class="built_in">String</span>.fromCharCode(p))</span><br></pre></td></tr></table></figure><p>第三步：增强语法支持<br>书写模板时，很多时候js语法需要用到’{‘或者’}’的时候，模板本身也有这个符号，顿时’{‘乱飞的情况就出现了。有些模板就提供了更好的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;@ <span class="keyword">if</span> data.con &gt; <span class="number">20</span> @&#125; <span class="comment">// if (data.con &gt; 20) &#123;</span></span><br><span class="line">    &lt;p&gt;ifififififif&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&#123;@ elif data.con === 20 @&#125; /</span><span class="regexp">/ &#125; else if (data.con === 20) &#123;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;elseelseelseelseifififififif&lt;/</span>p&gt;</span><br><span class="line">&#123;@ <span class="keyword">else</span> @&#125; <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    &lt;p&gt;elseelseelseelse&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&#123;/</span>@ <span class="keyword">if</span> @&#125; <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// for (var index = 0; index &lt; data.list.length; index++) &#123; var item = data.list[index]</span></span><br><span class="line">&#123;@ each data.list <span class="keyword">as</span> item @&#125;</span><br><span class="line">    &lt;p&gt;循环 &#123;&#123; index + <span class="number">1</span> &#125;&#125; 次: &#123;&#123; item &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&#123;/</span>@ each @&#125;</span><br></pre></td></tr></table></figure><p>其实就是在解析的语句时多了些处理，我们来把它加上：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置中增加 syntax 属性，默认 false, 其为 true 是开启 语法模式</span></span><br><span class="line"><span class="comment">// 配置中增加语法模式结束语句的标识符: endEvalSign: ['&#123;/#', '#&#125;']</span></span><br><span class="line"><span class="comment">// 给 Tpl 类添加方法，用于 语法模式 的语句解析</span></span><br><span class="line">_syntax (str)&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = str.trim().split(<span class="regexp">/\s+/</span>)</span><br><span class="line">    <span class="keyword">let</span> exp = str</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'if'</span>) &#123;</span><br><span class="line">        <span class="comment">// if (xx) &#123;</span></span><br><span class="line">        exp = <span class="string">`if ( <span class="subst">$&#123;arr.slice(<span class="number">1</span>).join(<span class="string">' '</span>)&#125;</span> ) &#123;`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'else'</span>) &#123;</span><br><span class="line">        <span class="comment">// &#125; else &#123;</span></span><br><span class="line">        exp = <span class="string">'&#125; else &#123;'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'elif'</span>) &#123;</span><br><span class="line">        <span class="comment">// &#125; else if (xx) &#123;</span></span><br><span class="line">        exp = <span class="string">`&#125; else if ( <span class="subst">$&#123;arr.slice(<span class="number">1</span>).join(<span class="string">' '</span>)&#125;</span> ) &#123;`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'each'</span>) &#123;</span><br><span class="line">        <span class="comment">// for (var index = 0, len = xx.length; index &lt; len; index++) </span></span><br><span class="line">        <span class="comment">// &#123; var item = xx[index]</span></span><br><span class="line">        exp = <span class="string">`for (var index = 0, len = <span class="subst">$&#123;arr[<span class="number">1</span>]&#125;</span>.length; index &lt; len; index++) &#123;</span></span><br><span class="line"><span class="string">        var item = <span class="subst">$&#123;arr[<span class="number">1</span>]&#125;</span>[index]`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exp</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改 _compile 解析语句的 replace</span></span><br><span class="line">.replace( <span class="keyword">this</span>.config.signs.evalSign, (match, p) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span>  exp = p.replace(<span class="string">'&amp;gt;'</span>, <span class="string">'&gt;'</span>).replace(<span class="string">'&amp;lt;'</span>, <span class="string">'&lt;'</span>)</span><br><span class="line">                               <span class="comment">// 语法模式</span></span><br><span class="line">    exp = <span class="keyword">this</span>.config.syntax ? <span class="keyword">this</span>._syntax(exp) : exp</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`'; <span class="subst">$&#123;exp&#125;</span>; tpl += '`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 增加结束标识的解析 &#123;/# if #&#125;  &#123;/# each #&#125;</span></span><br><span class="line">.replace( <span class="keyword">this</span>.config.signs.endEvalSign, () =&gt; <span class="string">"'&#125; tpl += '"</span>)</span><br></pre></td></tr></table></figure></p><p>第四步：增加过滤器支持<br>很多模板引擎中都有提供很多好用的过滤器:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 字符串转大写的过滤器</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 'tpl' | upper &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> =&gt; <span class="tag">&lt;<span class="name">p</span>&gt;</span>TPL<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">// 支持流式</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; 'tpl' | f1 | f2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在我们也来支持一下过滤：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于过滤器是对于变量的操作，所以只需在解析变量标识符&#123;&#123;&#125;&#125;的过程中做一下处理即可</span></span><br><span class="line"><span class="comment">// &#123;&#123;&#125;&#125; =&gt; 无过滤器直接返回， &#123;&#123; xx | xx &#125;&#125; 有过滤器则调用 Filters 类中对应的过滤器函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤器函数</span></span><br><span class="line"><span class="keyword">const</span> Filters = &#123;</span><br><span class="line">    upper: <span class="function"><span class="params">str</span> =&gt;</span> str.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 &#123;&#123;&#125;&#125;</span></span><br><span class="line">.replace( <span class="keyword">this</span>.config.signs.varSign, (match, p) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> filterIndex = p.indexOf(<span class="string">'|'</span>)</span><br><span class="line">    <span class="keyword">let</span> val = p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterIndex !== <span class="number">-1</span>) &#123; <span class="comment">// 有过滤器</span></span><br><span class="line">        <span class="keyword">const</span></span><br><span class="line">            arr = val.split(<span class="string">'|'</span>).map(<span class="function"><span class="params">s</span> =&gt;</span> s.trim()),</span><br><span class="line">            filters = arr.slice(<span class="number">1</span>) || [],</span><br><span class="line">            oldVal  = arr[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        val = filters.reduce(<span class="function">(<span class="params">curVal, filterName</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ! Filters[filterName] ) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`没有 <span class="subst">$&#123;filterName&#125;</span> 过滤器`</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`Filters['<span class="subst">$&#123;filterName&#125;</span>'](<span class="subst">$&#123;curVal&#125;</span>)`</span></span><br><span class="line">        &#125;, oldVal)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`'+(<span class="subst">$&#123;val&#125;</span>)+'`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// &lt;h1&gt;&#123;&#123; 'tpl' | upper | reverse &#125;&#125;&lt;/h1&gt; // =&gt; 'LPT'</span></span><br></pre></td></tr></table></figure></p><p>至此，我们的模板引擎就初步完成了，总结下功能:</p><ul><li>支持在模板中使用 js 语句</li><li>支持自定义标识符</li><li>支持更简洁的语法模式</li><li>支持过滤器</li></ul><p>以上代码总结一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Filters = &#123;</span><br><span class="line">    upper: <span class="function"><span class="params">str</span> =&gt;</span> str.toUpperCase(),</span><br><span class="line">    lower: <span class="function"><span class="params">str</span> =&gt;</span> str.toLowerCase(),</span><br><span class="line">    reverse: <span class="function"><span class="params">str</span> =&gt;</span> str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>),</span><br><span class="line">    <span class="built_in">escape</span>: <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/&amp;(?!\w+;)/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">            .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tpl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (config=&#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">            signs: &#123;</span><br><span class="line">                varSign:       [<span class="string">'&#123;&#123;'</span>, <span class="string">'&#125;&#125;'</span>],    <span class="comment">// 变量/表达式/过滤器</span></span><br><span class="line">            evalSign:      [<span class="string">'&#123;#'</span>, <span class="string">'#&#125;'</span>],    <span class="comment">// 语句</span></span><br><span class="line">                endEvalSign:   [<span class="string">'&#123;/#'</span>, <span class="string">'#&#125;'</span>],   <span class="comment">// 语法模式结束语句</span></span><br><span class="line">                commentSign:   [<span class="string">'&lt;!--'</span>, <span class="string">'--&gt;'</span>], <span class="comment">// 普通注释</span></span><br><span class="line">                noCommentSign: [<span class="string">'&#123;@'</span>, <span class="string">'@&#125;'</span>]     <span class="comment">// 忽略注释</span></span><br><span class="line">            &#125;,</span><br><span class="line">            syntax: <span class="literal">false</span>                       <span class="comment">// 语法模式</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.config = <span class="built_in">Object</span>.assign(&#123;&#125;, defaultConfig, config)</span><br><span class="line">        <span class="comment">// ['&#123;&#123;', '&#125;&#125;'] =&gt; /&#123;&#123;([\\s\\S]+?)&#125;&#125;/g 构造正则</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.config.signs).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.config.signs[key].splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'(.+?)'</span>)</span><br><span class="line">            <span class="keyword">this</span>.config.signs[key] = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.config.signs[key].join(<span class="string">''</span>), <span class="string">'g'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 语法模式</span></span><br><span class="line">    _syntax (str) &#123;</span><br><span class="line">        <span class="keyword">const</span> arr = str.trim().split(<span class="regexp">/\s+/</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1111:  '</span>+arr)</span><br><span class="line">        <span class="keyword">let</span> exp = str</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'if'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'2222:  '</span>+arr.slice(<span class="number">1</span>).join(<span class="string">' '</span>))</span><br><span class="line">            <span class="comment">// if (xx) &#123;</span></span><br><span class="line">            exp = <span class="string">`if ( <span class="subst">$&#123;arr.slice(<span class="number">1</span>).join(<span class="string">' '</span>)&#125;</span> ) &#123;`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'else'</span>) &#123;</span><br><span class="line">            <span class="comment">// &#125; else &#123;</span></span><br><span class="line">            exp = <span class="string">'&#125; else &#123;'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'elif'</span>) &#123;</span><br><span class="line">            <span class="comment">// &#125; else if (xx) &#123;</span></span><br><span class="line">            exp = <span class="string">`&#125; else if ( <span class="subst">$&#123;arr.slice(<span class="number">1</span>).join(<span class="string">' '</span>)&#125;</span> ) &#123;`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>] === <span class="string">'each'</span>) &#123;</span><br><span class="line">            <span class="comment">// for (var index = 0, len = xx.length; index &lt; len; index++) &#123;</span></span><br><span class="line">            exp = <span class="string">`for (var index = 0, len = <span class="subst">$&#123;arr[<span class="number">1</span>]&#125;</span>.length; index &lt; len; index++)</span></span><br><span class="line"><span class="string">&#123;var item = <span class="subst">$&#123;arr[<span class="number">1</span>]&#125;</span>[index]`</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 模板解析</span></span><br><span class="line">    _compile (str, data)&#123;</span><br><span class="line"><span class="keyword">const</span> tpl = str.replace(<span class="regexp">/\n/g</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment">// 注释</span></span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.noCommentSign, () =&gt; <span class="string">''</span>)</span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.commentSign, (match, p) =&gt; &#123;</span><br><span class="line">                <span class="keyword">const</span> exp = p.replace(<span class="regexp">/[\&#123;\&lt;\&#125;\&gt;]/g</span>, </span><br><span class="line">                match =&gt; <span class="string">`&amp;*&amp;<span class="subst">$&#123;match.charCodeAt()&#125;</span>&amp;*&amp;`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`'+'&lt;!-- <span class="subst">$&#123;exp&#125;</span> --&gt;'+'`</span></span><br><span class="line">    &#125;)</span><br><span class="line">            <span class="comment">// 变量/表达式</span></span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.varSign, (match, p) =&gt; &#123;</span><br><span class="line">                <span class="keyword">const</span> filterIndex = p.indexOf(<span class="string">'|'</span>)</span><br><span class="line">                <span class="keyword">let</span> val = p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (filterIndex !== <span class="number">-1</span>) &#123; <span class="comment">// 有过滤器</span></span><br><span class="line">                    <span class="keyword">const</span></span><br><span class="line">                        arr = val.split(<span class="string">'|'</span>).map(<span class="function"><span class="params">s</span> =&gt;</span> s.trim()),</span><br><span class="line">                        filters = arr.slice(<span class="number">1</span>) || [],</span><br><span class="line">                        oldVal  = arr[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                    val = filters.reduce(<span class="function">(<span class="params">curVal, filterName</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( ! Filters[filterName] ) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`没有 <span class="subst">$&#123;filterName&#125;</span> 过滤器`</span>)</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">`Filters['<span class="subst">$&#123;filterName&#125;</span>'](<span class="subst">$&#123;curVal&#125;</span>)`</span></span><br><span class="line">                    &#125;, oldVal)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(val)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">`'+(<span class="subst">$&#123;val&#125;</span>)+'`</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 语句</span></span><br><span class="line">    .replace( <span class="keyword">this</span>.config.signs.evalSign, (match, p) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span>  exp = p.replace(<span class="string">'&amp;gt;'</span>, <span class="string">'&gt;'</span>).replace(<span class="string">'&amp;lt;'</span>, <span class="string">'&lt;'</span>)</span><br><span class="line">                                           <span class="comment">// 语法模式</span></span><br><span class="line">                exp = <span class="keyword">this</span>.config.syntax ? <span class="keyword">this</span>._syntax(exp) : exp</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`'; <span class="subst">$&#123;exp&#125;</span>; tpl += '`</span></span><br><span class="line">    &#125;)</span><br><span class="line">            <span class="comment">// 语法模式(结束标签)</span></span><br><span class="line">            .replace( <span class="keyword">this</span>.config.signs.endEvalSign, () =&gt; <span class="string">"'&#125; tpl += '"</span>)</span><br><span class="line">            .replace(<span class="regexp">/\&amp;\*\&amp;(.*?)\&amp;\*\&amp;/g</span>, (match, p) =&gt;  <span class="built_in">String</span>.fromCharCode(p))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'data'</span>, <span class="string">`var tpl='<span class="subst">$&#123;tpl&#125;</span>'; return tpl;`</span>)(data)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 入口</span></span><br><span class="line">    compile (tplStr, data) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>._compile(tplStr, data)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(err)</span><br><span class="line">            <span class="built_in">console</span>.trace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tpl</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Tpl(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑代码测试一下吧！！</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="VyjNNq" data-default-tab="html,result" data-user="jinwang" data-embed-version="2" data-pen-title="VyjNNq" class="codepen">See the Pen <a href="https://codepen.io/jinwang/pen/VyjNNq/" target="_blank" rel="noopener">VyjNNq</a> by  石其龙 (<a href="https://codepen.io/jinwang" target="_blank" rel="noopener">@jinwang</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   前端模板引擎相信大家都不会陌生了吧，尤其是注重前后端分离的今天(除非你还在用拼接字符串)。&lt;br&gt;   &lt;strong&gt;引擎&lt;/strong&gt;一词总让人感觉很高端的样子，其实归根结底也只是处理字符串的一种方式而已。&lt;br&gt;   本文总结了3种实现模板引擎的方式，最后将逐步实现一个类似于 underscore.template 的模板插件。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js原生继承</title>
    <link href="https://es-7.github.io/blog/2015/07/03/inheirt/"/>
    <id>https://es-7.github.io/blog/2015/07/03/inheirt/</id>
    <published>2015-07-02T16:00:00.000Z</published>
    <updated>2017-12-21T05:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>  js中的继承有多种实现方式，今天我们来分析一下各种继承的方式以及其优缺点。<br> <a id="more"></a>   </p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>   首先介绍一下原型链的基本概念。<br>   先来理解一下原型、构造函数和实例之间的关系。      </p><ul><li>每个构造函数都有一个原型对象（通过prototype属性）    </li><li>原型对象都包含一个指向构造函数的指针（通过constructor属性）</li><li>实例都包含一个指向原型对象的内部指针（通过隐式__proto__属性）</li></ul><p>   那么，若原型对象被另一个原型的实例覆盖，则此时原型对象将包含一个指向另一个原型对象的指针。按照这样层层递进，就构成了实例与原型的链条。</p><p>   这个概念可能不好理解，请看下面例子：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parent name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用原型链继承Parent构造函数</span></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);</span><br><span class="line"><span class="comment">// constructor属性，指向当前的Child构造函数。</span></span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line">Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'child name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 调用父类</span></span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);</span><br><span class="line">parent.sayName(); <span class="comment">// parent name is father!</span></span><br><span class="line"><span class="comment">// 调用子类</span></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>);</span><br><span class="line">child.sayName(); <span class="comment">// child name is son!</span></span><br><span class="line">child.age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(child.age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure></p><p>  例子中通过将Child的原型对象覆盖，将Child与Parent关联起来了。</p><p>  使用原型链继承缺点：</p><ul><li>由于包含引用类型值的原型属性会被所有实例共享，导致修改一个实例引用值，所有的实例对于这个引用全部被修改。请看下面例子：</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"super"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> Child();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>);</span><br><span class="line">instance1.name = <span class="string">"sub"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(instance1.name); <span class="comment">// sub</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">//red, blue, green, black</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.name); <span class="comment">// super</span></span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">//red, blue, green, black</span></span><br></pre></td></tr></table></figure><p>  就像上面的例子所示，当我们new一个新对象时（其过程可查看new一个新对象会发生什么），原型属性会复制一份到我们实例中。对于值类型，实例会复制其名字和值放在另一块内存中；而对于引用类型，实例只是复制了指向它的值的指针。因而修改实例的值类型，不会影响其他实例；但是修改引用类型的值，其他实例也会被影响到。</p><ul><li><p>创建子类型的实例时，并不能在不影响所有对象实例的情况下给超类型的构造函数传递参数。 </p></li><li><p>顺序不当可能会引发问题，如Child.prototype.sayName 必须写在 Child.prototype = new Parent(‘father’); 之后，不然就会被覆盖掉。</p></li></ul><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><p>  基本思想：在子类型构造函数内部调用超类型构造函数。<br>  还是先看例子：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parent name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Parent.prototype.doSomthing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parent do something!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过call,apply 改变对象的this指向来继承</span></span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="comment">// Parent.apply(this, arguments);</span></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'child name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>);</span><br><span class="line">child.sayName(); <span class="comment">// child name: son</span></span><br><span class="line">child.doSomthing(); <span class="comment">// TypeError: child.doSomthing is not a function</span></span><br></pre></td></tr></table></figure></p><p> 相当于 Parent 函数在 Child 函数中执行了一遍，并且将所有与 this 绑定的变量都切换到了 Child 上，使用构造函数继承的方式解决了原型链继承的问题：</p><ul><li>实例可以独享一份引用类型的值<br>通过call改变this指向，这样每次执行Parent函数，this指向的都是新的对象。相当于每个新的对象都有一份完整的Parent代码。即每个实例都有一份自己的属性副本。</li></ul><ul><li>可以传参数<br>我们可以通过call函数向Parent传参数   </li></ul><p>构造函数继承也有缺点：</p><ul><li>无法实现函数复用<br>看上面的代码可知，我们只是执行了Parent函数，但是并没有继承它的原型链上的函数。这样会导致若要使用公有函数时，自己定义或者在Parent构造函数中定义，违背了函数复用的初衷。</li></ul><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>组合继承将原型链继承和构造函数继承结合到一起，是最常用的的继承方式。<br>基本思想是：使用原型链实现对原型属性和方法的继承，借用构造函数实现对实例属性的继承。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parent name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Parent.prototype.doSomthing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parent do something!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过call,apply 改变对象的this指向来继承</span></span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);  <span class="comment">// 第二次调用 </span></span><br><span class="line">    <span class="comment">// Parent.apply(this, arguments);</span></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);  <span class="comment">// 第一次调用</span></span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line">Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'child name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>);</span><br><span class="line">child.sayName(); <span class="comment">// child name: son</span></span><br><span class="line">child.doSomthing(); <span class="comment">// parent do something!</span></span><br></pre></td></tr></table></figure></p><p>由例子可知，组合继承结合了原型链继承和构造函数继承的优点，既可以拥有属于自己的属性，也有了共同的方法。<br>当然，它也有缺点。</p><ul><li>无论什么情况下，都会调用两次超类型构造函数。一次在创建子类型的原型时；一次在子类型构造函数内部。当第二次调用时，会重写第一次调用时获得的原型属性。</li></ul><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>基本思想：借助已有的对象创建新对象，不必通过构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ob = &#123; <span class="attr">name</span>: <span class="string">'李达康'</span>, <span class="attr">friends</span>: [<span class="string">'沙瑞金'</span>, <span class="string">'季昌明'</span>] &#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型式继承  参数o,引用类型值，实质就是一个内存地址</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; obj</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个构造函数F</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 空构造函数F</span></span><br><span class="line">    &#125;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ob1 = object(ob);</span><br><span class="line">ob1.name = <span class="string">'侯亮明'</span>;</span><br><span class="line">ob1.friends.push(<span class="string">'陈海'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ob1.name); <span class="comment">// 侯亮明</span></span><br><span class="line"><span class="built_in">console</span>.log(ob1.friends); <span class="comment">// ["沙瑞金", "季昌明", "陈海"]</span></span><br><span class="line"><span class="keyword">var</span> ob2 = object(ob);</span><br><span class="line"><span class="built_in">console</span>.log(ob2.name); <span class="comment">// 李达康</span></span><br><span class="line"><span class="built_in">console</span>.log(ob2.friends); <span class="comment">// ["沙瑞金", "季昌明", "陈海"]</span></span><br></pre></td></tr></table></figure><p>可以看出该方法与原型链继承类似，但是写法比它简单。<br>因此，若只是想让一个对象和另一个相似，可以使用这种方法。<br>不过它也存在缺点：</p><ul><li>包含引用类型值的属性始终共享相应的值。</li></ul><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>基本思想：创建一个仅用于封装继承过程的函数，在内部对对象做相关增强，然后返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ob = &#123; <span class="attr">name</span>: <span class="string">'李达康'</span>, <span class="attr">friends</span>: [<span class="string">'沙瑞金'</span>, <span class="string">'季昌明'</span>] &#125;;</span><br><span class="line"><span class="comment">// 上面再ECMAScript5 有了一新的规范写法，Object.create(ob) 效果是一样的</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个对象</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; o</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createOb</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newob = <span class="built_in">Object</span>.create(o); <span class="comment">// 创建对象</span></span><br><span class="line">    newob.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 增强对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> newob; <span class="comment">// 指定对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ob1 = createOb(ob);</span><br><span class="line">ob1.sayname(); <span class="comment">// 李达康</span></span><br></pre></td></tr></table></figure><p>这样做相当于构造函数那样，并不是真正的函数复用。而且包含引用类型值的属性依然始终共享相应的值。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>这个方法属于比较完美的方法。先看代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现继承</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; Parent 父类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; Child  子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">Parent, Child</span>) </span>&#123;</span><br><span class="line">    Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype); <span class="comment">// 修改</span></span><br><span class="line">    Child.prototype.construtor = Child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.friends = [<span class="string">'达康'</span>, <span class="string">'瑞金'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'parent name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; parentName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, parentName</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, parentName);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现继承</span></span><br><span class="line">inheritPrototype(Parent, Child);</span><br><span class="line">Child.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'child name is '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);</span><br><span class="line">parent.sayName(); <span class="comment">// parent name: father</span></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'son'</span>, <span class="string">'father'</span>);</span><br><span class="line">child1.friends.push(<span class="string">'猴子'</span>); <span class="comment">// ["达康", "瑞金", "猴子"]</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.friends);</span><br><span class="line">child1.sayName(); <span class="comment">// child name: son</span></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'son2'</span>, <span class="string">'father'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child2.friends); <span class="comment">// ["达康", "瑞金"]</span></span><br><span class="line">child1.sayName(); <span class="comment">// child name: son2</span></span><br></pre></td></tr></table></figure><p>这个方法解决了组合继承调用两次超类型的缺点。</p><p>首先回顾一下组合继承的两次调用：</p><ul><li><p>创建子类型的原型对象时调用（new Parent()）<br>这个过程会主要是new一个对象的过程，它会复制Parent的属性和方法给子类型。</p></li><li><p>在子类型构造函数里调用<br>在构造函数里调用时，又会复制一遍超类型的属性，因而会影响性能。</p></li></ul><p>对于寄生组合式继承方式：</p><ul><li>先将超类型中的原型对象复制一份，再new对象作为子类型的原型对象。这样做，我们只是复制了超类型的原型对象，而对于超类型构造函数里的属性不会复制。因而减少了调用超类型的次数。</li><li>这样做仍然保持原型链不变</li></ul><h3 id="ES6中class实现继承"><a href="#ES6中class实现继承" class="headerlink" title="ES6中class实现继承"></a>ES6中class实现继承</h3><ul><li><p>ES6提供了更接近传统语言”类”的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。</p></li><li><p>基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到；新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类</span></span><br><span class="line"><span class="comment"> * @class Parent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an instance of Parent.</span></span><br><span class="line"><span class="comment">     * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment">     * @memberOf Parent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做点东西</span></span><br><span class="line"><span class="comment">     * @memberOf Parent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    doSomething() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'parent do something!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印名字</span></span><br><span class="line"><span class="comment">     * @memberOf Parent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`parent name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>!`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类 继承 父类</span></span><br><span class="line"><span class="comment"> * @class Child</span></span><br><span class="line"><span class="comment"> * @extends &#123;Parent&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an instance of Child.</span></span><br><span class="line"><span class="comment">     * @param &#123;any&#125; name</span></span><br><span class="line"><span class="comment">     * @param &#123;any&#125; parentName</span></span><br><span class="line"><span class="comment">     * @memberOf Child</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, parentName) &#123;</span><br><span class="line">        <span class="comment">// 调用基类的构造方法</span></span><br><span class="line">        <span class="keyword">super</span>(parentName);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印名字 覆盖父类的sayName方法</span></span><br><span class="line"><span class="comment">     * @memberOf Child</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`child name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>!`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="string">'son'</span>, <span class="string">'father'</span>);</span><br><span class="line">child.sayName(); <span class="comment">// child name: son</span></span><br><span class="line">child.doSomething(); <span class="comment">// parent do something!</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="keyword">new</span> Parent(<span class="string">'father'</span>);</span><br><span class="line">parent.sayName(); <span class="comment">// parent name: father</span></span><br></pre></td></tr></table></figure><p>如果项目中使用到ES6语法开发，推荐使用ES6继承</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  js中的继承有多种实现方式，今天我们来分析一下各种继承的方式以及其优缺点。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
